include_guard(GLOBAL)

set(TESTING_WORKSPACE_DIRECTORY "${CMAKE_BINARY_DIR}/test_workspace")
set(TESTING_TEST_REPORTS_DIRECTORY "${CMAKE_BINARY_DIR}/test_reports")
set(TESTING_TARGETS
    utest
    mtest
    itest
    ptest
    mantest
)

macro(testing_tests_apply_to_setup out_tests_apply)
    # NOTE: Enable tests if building for host (i.e. not crosscompiling)
    get_matches_current_target_hardware(${out_tests_apply} ${HOST_HARDWARE})
endmacro(testing_tests_apply_to_setup)

# Test framework specifics --------------------------------------------------

function(testing_enable_gtest)
    if(NOT GTEST_FOUND)
        testing_tests_apply_to_setup(tests_apply_to_setup)

        if(${tests_apply_to_setup})
            find_package(GTest)
            find_package(GMock)

            if(NOT GTEST_FOUND OR NOT GMOCK_FOUND)
                print_fatal_error("Could not find GTest/GMock")
            endif()

            enable_testing()
        endif()
    endif()
endfunction(testing_enable_gtest)

function(testing_enable_catch2)
    if(NOT TARGET Catch2::Catch2)
        testing_tests_apply_to_setup(tests_apply_to_setup)

        if(${tests_apply_to_setup})
            find_package(Catch2 REQUIRED CONFIG)
            enable_testing()
        endif()
    endif()
endfunction(testing_enable_catch2)

# Supplementary -------------------------------------------------------------

function(testing_add_run_target target_name)
    set(run_target_name run_${target_name})

    coverage_define_capture_target(capture_target_name ${target_name})

    if(TARGET ${capture_target_name})
        set(capture_command
            COMMAND ${CMAKE_COMMAND}
                --build "${CMAKE_BINARY_DIR}"
                --config $<CONFIG>
                --target ${capture_target_name}
        )
    endif()

    add_custom_target(${run_target_name}
        WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
        COMMAND ${CMAKE_CTEST_COMMAND}
            --build-config $<CONFIG>
            --verbose
            --tests-regex "^${target_name}.+"
        ${capture_command}
        DEPENDS ${COVERAGE_BASELINE_DEPFILE}
        VERBATIM
    )
    add_dependencies(${run_target_name} ${target_name} coverage_baseline)

    set_property(
        TARGET ${run_target_name}
        APPEND PROPERTY ADDITIONAL_CLEAN_FILES "${TESTING_WORKSPACE_DIRECTORY}/${target_name}"
    )
endfunction(testing_add_run_target)

function(testing_remove_autogenerated_ctest_targets)
    set_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)
endfunction(testing_remove_autogenerated_ctest_targets)

macro(testing_include_ctest)
    testing_remove_autogenerated_ctest_targets()
    include(CTest)
endmacro(testing_include_ctest)

# Module startup interface --------------------------------------------------

macro(testing_initialize)
    testing_include_ctest()

    foreach(testing_target ${TESTING_TARGETS})
        add_custom_target(${testing_target} ALL)
    endforeach()
endmacro(testing_initialize)

function(testing_finalize)
    foreach(testing_target ${TESTING_TARGETS})
        testing_add_run_target(${testing_target})
    endforeach()

    if(NOT TARGET run_test)
        add_custom_target(run_test
            COMMAND ${CMAKE_COMMAND}
                --config $<CONFIG>
                --build "${CMAKE_BINARY_DIR}"
                --target summarize
            DEPENDS
                run_utest
                run_mtest
                run_itest
                run_ptest
                mantest # Intentionally merely building 'mantest' without running
        )
        set_property(
            TARGET run_test
            APPEND PROPERTY ADDITIONAL_CLEAN_FILES "${TESTING_WORKSPACE_DIRECTORY}"
        )
    endif()
endfunction(testing_finalize)
